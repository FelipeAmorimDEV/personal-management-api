generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
}

model User {
  id                        String                      @id @default(uuid())
  name                      String
  email                     String                      @unique
  password                  String
  role                      Role                        @default(STUDENT)
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  trainingPlans             TrainingPlan[]
  ExerciseExecution         ExerciseExecution[]
  TrainingExecutionFeedback TrainingExecutionFeedback[]

  @@map("users")
}

model Exercise {
  id                String              @id @default(uuid())
  name              String
  videoUrl          String
  description       String?
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  StudentExercise   StudentExercise[]
  ExerciseExecution ExerciseExecution[]

  @@map("exercises")
}

enum TrainingPlanStrategy {
  FIXED_DAYS
  FLEXIBLE_SESSIONS
}

model TrainingPlan {
  id              String               @id @default(uuid())
  name            String
  goal            String
  sessionsPerWeek Int                  @map("sessions_per_week")
  strategy        TrainingPlanStrategy @default(FLEXIBLE_SESSIONS)
  startDate       DateTime             @map("start_date")
  endDate         DateTime             @map("end_date")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  studentId       String               @map("student_id")

  student  User       @relation(fields: [studentId], references: [id])
  Training Training[]

  @@map("training_plans")
}

enum TrainingType {
  DAY
  SESSION
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Training {
  id             String            @id @default(uuid())
  name           String
  type           TrainingType      @default(SESSION)
  daysOfWeek     DaysOfWeek?
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  trainingPlanId String            @map("training_plan_id")
  exercises      StudentExercise[]

  trainingPlan              TrainingPlan                @relation(fields: [trainingPlanId], references: [id])
  TrainingExecutionFeedback TrainingExecutionFeedback[]
}

model StudentExercise {
  id          String   @id @default(uuid())
  sets        Int
  repetitions Int
  restTime    Int      @map("rest_time")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  exerciseId  String   @map("exercise_id")
  trainingId  String   @map("training_id")

  exercise Exercise @relation(fields: [exerciseId], references: [id])
  training Training @relation(fields: [trainingId], references: [id])
}

model TrainingExecutionFeedback {
  id         String              @id @default(uuid())
  rate       Int
  comment    String?
  trainingId String              @map("training_id")
  studentId  String              @map("student_id")
  createdAt  DateTime            @default(now()) @map("created_at")
  readAt     DateTime?           @map("read_at")
  exercises  ExerciseExecution[]

  training              Training                @relation(fields: [trainingId], references: [id])
  student               User                    @relation(fields: [studentId], references: [id])
  TrainingFeedbackReply TrainingFeedbackReply[]

  @@map("training_execution_feedbacks")
}

model ExerciseExecution {
  id         String   @id @default(uuid())
  studentId  String   @map("student_id")
  exerciseId String   @map("exercise_id")
  weightUsed Int      @map("weight_used")
  feedbackId String   @map("feedback_id")
  createdAt  DateTime @default(now()) @map("created_at")

  student  User                      @relation(fields: [studentId], references: [id])
  exercise Exercise                  @relation(fields: [exerciseId], references: [id])
  feedback TrainingExecutionFeedback @relation(fields: [feedbackId], references: [id])

  @@map("exercise_executions")
}

model TrainingFeedbackReply {
  id                 String    @id @default(uuid())
  reply              String
  trainingFeedbackId String    @map("training_feedback_id")
  createdAt          DateTime  @default(now()) @map("created_at")
  readAt             DateTime? @map("read_at")

  feedbacks TrainingExecutionFeedback @relation(fields: [trainingFeedbackId], references: [id])
}
