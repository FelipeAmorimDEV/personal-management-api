generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                      @id @default(uuid())
  name                      String
  email                     String                      @unique
  password                  String
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  role                      Role                        @default(STUDENT)
  avatar                    String?
  ExerciseExecution         ExerciseExecution[]
  MyProgress                MyProgress[]
  MyProgressAnswer          MyProgressAnswer[]
  TrainingExecutionFeedback TrainingExecutionFeedback[]
  trainingPlans             TrainingPlan[]
  BodyComposition           BodyComposition[]
  Anamnesis                 Anamnesis[]
  Invoice                   Invoice[]

  @@map("users")
}

model Exercise {
  id                String              @id @default(uuid())
  name              String
  videoUrl          String
  description       String?
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  ExerciseExecution ExerciseExecution[]
  StudentExercise   StudentExercise[]
  groupMuscle       GroupMuscle[]       @relation("ExerciseMuscleGroups")

  @@map("exercises")
}

model TrainingPlan {
  id              String               @id @default(uuid())
  name            String
  sessionsPerWeek Int                  @map("sessions_per_week")
  strategy        TrainingPlanStrategy @default(FLEXIBLE_SESSIONS)
  status          TrainingPlanStatus   @default(ACTIVE)
  startDate       DateTime             @map("start_date")
  endDate         DateTime             @map("end_date")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  studentId       String               @map("student_id")
  trainingLevel   String               @map("training_level")
  goal            String
  Training        Training[]
  student         User                 @relation(fields: [studentId], references: [id])

  @@map("training_plans")
}

model Training {
  id                        String                      @id @default(uuid())
  name                      String
  type                      TrainingType                @default(SESSION)
  daysOfWeek                DaysOfWeek?
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  trainingPlanId            String                      @map("training_plan_id")
  exercises                 StudentExercise[]
  trainingPlan              TrainingPlan                @relation(fields: [trainingPlanId], references: [id])
  TrainingExecutionFeedback TrainingExecutionFeedback[]
  groupMuscle               GroupMuscle[]               @relation("TrainingMuscleGroups")

  @@map("trainings")
}

model GroupMuscle {
  id       String     @id @default(uuid())
  name     String
  Exercise Exercise[] @relation("ExerciseMuscleGroups")
  Training Training[] @relation("TrainingMuscleGroups")

  @@map("group_muscles")
}

model StudentExercise {
  id          String   @id @default(uuid())
  sets        Int
  repetitions Int
  restTime    Int      @map("rest_time")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  exerciseId  String   @map("exercise_id")
  trainingId  String   @map("training_id")
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  training    Training @relation(fields: [trainingId], references: [id])

  @@map("student_exercise")
}

model TrainingExecutionFeedback {
  id            String                 @id @default(uuid())
  comment       String?
  trainingId    String                 @map("training_id")
  createdAt     DateTime               @default(now()) @map("created_at")
  readAt        DateTime?              @map("read_at")
  studentId     String                 @map("student_id")
  intensity     IntensityLevel
  exercises     ExerciseExecution[]
  student       User                   @relation(fields: [studentId], references: [id])
  training      Training               @relation(fields: [trainingId], references: [id])
  feedbackReply TrainingFeedbackReply?

  @@map("training_execution_feedbacks")
}

model ExerciseExecution {
  id         String                    @id @default(uuid())
  studentId  String                    @map("student_id")
  exerciseId String                    @map("exercise_id")
  weightUsed Int                       @map("weight_used")
  feedbackId String                    @map("feedback_id")
  createdAt  DateTime                  @default(now()) @map("created_at")
  exercise   Exercise                  @relation(fields: [exerciseId], references: [id])
  feedback   TrainingExecutionFeedback @relation(fields: [feedbackId], references: [id])
  student    User                      @relation(fields: [studentId], references: [id])

  @@map("exercise_executions")
}

model TrainingFeedbackReply {
  id                 String                    @id @default(uuid())
  reply              String
  trainingFeedbackId String                    @unique @map("training_feedback_id")
  createdAt          DateTime                  @default(now()) @map("created_at")
  readAt             DateTime?                 @map("read_at")
  feedback           TrainingExecutionFeedback @relation(fields: [trainingFeedbackId], references: [id])

  @@map("training_feedback_replys")
}

model MyProgress {
  id               String            @id @default(uuid())
  comment          String
  photo            String
  createdAt        DateTime          @default(now()) @map("created_at")
  studentId        String            @map("student_id")
  user             User              @relation(fields: [studentId], references: [id])
  myProgressAnswer MyProgressAnswer?

  @@map("my_progress")
}

model MyProgressAnswer {
  id           String     @id @default(uuid())
  adminId      String     @map("admin_id")
  reply        String
  myProgressId String     @unique @map("my_progress_id")
  admin        User       @relation(fields: [adminId], references: [id])
  MyProgress   MyProgress @relation(fields: [myProgressId], references: [id])

  @@map("my_progress_answers")
}

model BodyComposition {
  id                 String    @id @default(uuid())
  student            User      @relation(fields: [studentId], references: [id])
  height             Int
  weight             Int
  age                Int
  gender             Gender
  methodName         String    @map("method_name")
  chest              Int
  abdominal          Int
  thigh              Int
  triceps            Int
  suprailiac         Int
  bodyDensity        Int       @map("body_density")
  bodyFatPercentage  Int       @map("body_fat_percentage")
  leanMassPercentage Int       @map("lean_mass_percentage")
  fatMassKg          Int       @map("fat_mass_kg")
  leanMassKg         Int       @map("lean_mass_kg")
  bmi                Int
  waist              Int
  hip                Int
  waistHipRatio      Int       @map("waist_hip_ratio")
  createdAt          DateTime  @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  studentId          String    @map("student_id")

  @@map("body_composition")
}

model Anamnesis {
  id                           String    @id @default(uuid())
  student                      User      @relation(fields: [studentId], references: [id])
  studentId                    String    @map("student_id")
  fullName                     String    @map("full_name")
  age                          Int
  hasHeartProblem              Boolean   @map("has_heart_problem")
  hasChestPainDuringActivity   Boolean   @map("has_chest_paint_during_activity")
  hadChestPainInLastMonth      Boolean   @map("had_chest_pain_in_last_month")
  hasBalanceProblems           Boolean   @map("has_balance_problems")
  hasBoneOrJointProblem        Boolean   @map("has_bone_or_joint_problem")
  takesBloodPressureMedication Boolean   @map("takes_blood_presure_medication")
  hasOtherHealthIssues         Boolean   @map("has_other_health_issues")
  createdAt                    DateTime  @default(now()) @map("created_at")
  updatedAt                    DateTime? @updatedAt @map("updated_at")

  @@map("anamnesis")
}

model Invoice {
  id            String         @id @default(uuid())
  student       User           @relation(fields: [studentId], references: [id])
  studentId     String         @map("student_id")
  methodPayment MethodPayment? @map("method_payment")
  dueDate       DateTime       @map("due_date")
  paymentDate   DateTime?      @map("payment_date")
  description   String
  invoiceStatus PaymentStatus  @map("payment_status")
  price         Float
  createdAt     DateTime       @map("created_at")
  updatedAt     DateTime?      @updatedAt @map("updated_at")

  @@map("invoices")
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentStatus {
  PAID
  PENDING
}

enum MethodPayment {
  CREDIT_CARD
  PIX
  MONEY
}

enum Role {
  ADMIN
  STUDENT
}

enum TrainingPlanStrategy {
  FIXED_DAYS
  FLEXIBLE_SESSIONS
}

enum TrainingType {
  DAY
  SESSION
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum IntensityLevel {
  VERY_LOW
  LOW
  MODERATE
  HIGH
  EXTREME
}

enum TrainingPlanStatus {
  ACTIVE
  SUSPENDED
  EXPIRED
  CANCELED
}
